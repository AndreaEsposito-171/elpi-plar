%==TEST PER SORTRULE==%
accumulate lib.
accumulate formula.
accumulate prop.
accumulate fol.
accumulate verbosity.
accumulate test.
accumulate prolog.

type u formula.
type p, pp term -> formula.
type r, q, g term -> term -> formula.
type h term -> term -> term -> formula.
type a, b, c, d, e, f term.
type f term -> term -> term.
type zo term.

atomic u.
atomic (r _X _Y).
atomic (q _X _Y).
atomic (g _X _Y).
atomic (leq _X _Y).
atomic (append/t _X _Y _Z).
atomic (ssort _X _Y).
atomic (delete _X _Y _Z).
atomic (ssorted _X).
atomic (pperm _X _Y).

type s term -> term.
type leq term -> term -> formula.
%===LISTE===%
type append/t term -> term -> term -> formula.
type nil/t term.
type cons/t term -> term -> term.
%===SORTING ALGORITHM===%
type ssort, pperm term -> term -> formula.
type delete term -> term -> term -> formula.
type ssorted term -> formula.

atomic (ssort _X _Y).
atomic (delete _X _Y _Z).
atomic (ssorted _X).
atomic (pperm _X _Y).

shorten test.{ run-tests, ok, ko, okb, kob, ok-eq, section }.
shorten verbosity.{ quiet, terse, info, verbose, debug, with-verbosity }.

main :-  
  SORTRULES = 
 [(all x \ all y \ (pperm x y && ssorted y) ==> ssort x y),
  (truth ==> ssorted nil/t),
  (all x \ truth ==> ssorted (cons/t x nil/t)),
  (all x \ all y \ all z \ ((leq x y) && ssorted (cons/t y z)) ==> ssorted (cons/t x (cons/t y z))),
  (truth ==> pperm nil/t nil/t),
  (all z \ all v \ all y \ all u \ all x \ ((delete u (cons/t x y) z) && pperm z v) ==> (pperm (cons/t x y) (cons/t u v))),
  (all x \ all y \ truth ==> delete x (cons/t x y) y),
  (all x \ all y \ all z \ all w \ delete x z w ==> delete x (cons/t y z) (cons/t y w)),
  (all x \ truth ==> leq zo x), 
  (all x \ all y \ leq x y ==> leq (s x) (s y))],
  SORTRULES_AE = 
 [(all x \ all y \ (pperm x y && ssorted y) ==> ssort x y),
  (ssorted nil/t),
  (all x \ ssorted (cons/t x nil/t)),
  (all x \ all y \ all z \ ((leq x y) && ssorted (cons/t y z)) ==> ssorted (cons/t x (cons/t y z))),
  (pperm nil/t nil/t),
  (all z \ all v \ all y \ all u \ all x \ ((delete u (cons/t x y) z) && pperm z v) ==> (pperm (cons/t x y) (cons/t u v))),
  (all x \ all y \ delete x (cons/t x y) y),
  (all x \ all y \ all z \ all w \ delete x z w ==> delete x (cons/t y z) (cons/t y w)),
  (all x \ leq zo x), 
  (all x \ all y \ leq x y ==> leq (s x) (s y))],
    with-verbosity quiet (run-tests

    [ section "Test ssort banale" 
    % ,(ok (
    %         simpleprolog SORTRULES 
    %         (ssort (cons/t zo (cons/t zo nil/t)) (cons/t zo (cons/t zo nil/t)))
    %      ) )
    % , (ok (
    %         simpleprolog SORTRULES (ssort (cons/t (s zo) nil/t) (cons/t (s zo) nil/t))
    %      ) )
    % , (ok (
    %         simpleprolog SORTRULES (ssort nil/t nil/t)
    % ))
    % , section "Test delete"
    , (ok (
        simpleprolog SORTRULES (delete zo (cons/t zo nil/t) nil/t)
    )
    )
    % ,(ok (
    %    simpleprolog SORTRULES (delete zo (cons/t zo (cons/t (s zo) nil/t)) (cons/t (s zo) nil/t))        
    % ))
    % , (ok (
    %     simpleprolog SORTRULES (delete zo (cons/t (s zo) (cons/t zo nil/t)) (cons/t (s zo) nil/t))
    % )
    % )
    , section "Test pperm"
    % , (ok (
    % simpleprolog SORTRULES (pperm nil/t nil/t)
    % )
    % )
    % , (ok (
    % simpleprolog SORTRULES (pperm (cons/t zo nil/t) (cons/t zo nil/t))
    % ))
    % , (ok (
    % simpleprolog SORTRULES (pperm (cons/t (s zo) (cons/t zo nil/t)) (cons/t (s zo)(cons/t zo nil/t)))
    % ))
    % , section "Test ssorted"
    % , (ok (
    % simpleprolog SORTRULES (ssorted nil/t)
    % ))
    % , (ok (
    % simpleprolog SORTRULES (ssorted (cons/t zo nil/t))
    % ))
    % , (ok (
    % simpleprolog SORTRULES (ssorted (cons/t zo (cons/t (s zo) nil/t)))
    % ))
    % ,(ko (
    % simpleprolog SORTRULES (ssorted (cons/t (s zo) (cons/t zo nil/t)))
    % )) 
    , section "Test ssort"
    % , (ok (
    % simpleprolog SORTRULES (ssort (cons/t (s zo) (cons/t zo nil/t)) (cons/t zo (cons/t (s zo) nil/t)) )
    % )) 
    % , (ok (
    % simpleprolog SORTRULES (ssort (cons/t (s (s zo)) (cons/t (s zo) (cons/t zo nil/t))) 
    %                               (cons/t zo (cons/t (s zo) (cons/t (s (s zo)) nil/t))) )
    % ))
    % , (ok-eq (ssort (cons/t (s (s zo)) (cons/t (s zo) (cons/t zo nil/t))) (cons/t zo (cons/t (s zo) (cons/t (s (s zo)) nil/t))))
    %     (prolog SORTRULES 
    %     (expr x \ ssort (cons/t (s (s zo)) (cons/t (s zo) (cons/t zo nil/t))) x)
    % )
    % )
    % , (ok-eq (ssort (cons/t (s (s zo)) (cons/t (s zo) (cons/t zo nil/t))) (cons/t zo (cons/t (s zo) (cons/t (s (s zo)) nil/t))) )
    %   (prolog SORTRULES_AE
    %   (expr x \ ssort (cons/t (s (s zo)) (cons/t (s zo) (cons/t zo nil/t))) x)
    % ))
    , (ok (prolog SORTRULES_AE
       (delete zo (cons/t zo nil/t) nil/t) (delete zo (cons/t zo nil/t) nil/t )
    ))
    , (ok-eq (delete zo (cons/t zo nil/t) nil/t)
    (prolog SORTRULES_AE 
    (expr x \ delete zo (cons/t zo nil/t) x)
    ))
    , (ok-eq (delete zo (cons/t (s zo) (cons/t zo nil/t)) (cons/t (s zo) nil/t))
    (prolog SORTRULES_AE 
    (expr x \ delete zo (cons/t (s zo) (cons/t zo nil/t)) x)
    ))
    , (ok (
        prolog SORTRULES_AE (ssorted nil/t) (ssorted nil/t)
    )
    )
    , (ok (
        prolog SORTRULES_AE (ssorted (cons/t zo nil/t)) (ssorted (cons/t zo nil/t))
    )
    )
    , (ok-eq ((ssorted (cons/t zo (cons/t (s zo) nil/t)))) (
        prolog SORTRULES_AE (ssorted (cons/t zo (cons/t (s zo) nil/t)))
    )
    )
    , (ko (
        prolog SORTRULES_AE (ssorted (cons/t (s zo) (cons/t zo nil/t))) ((ssorted (cons/t zo (cons/t (s zo) nil/t)))) 
    )
    )
    , (ok-eq (pperm (cons/t zo nil/t) (cons/t zo nil/t)) (
        prolog SORTRULES_AE (expr x \ pperm (cons/t zo (nil/t)) x) 
    )
    )
    , (ok-eq (ssort (cons/t (s zo) (cons/t zo (cons/t (s (s zo)) nil/t))) (cons/t zo (cons/t (s zo) (cons/t (s (s zo)) nil/t)))) (
        prolog SORTRULES_AE (expr x \ ssort (cons/t (s zo) (cons/t zo (cons/t (s (s zo)) nil/t))) x)
    )
    )
      ]).


%   main :- SORTRULES = 
%  [(all x \ all y \ (pperm x y && ssorted y) ==> ssort x y),
%   (truth ==> ssorted nil/t),
%   (all x \ truth ==> ssorted (cons/t x nil/t)),
%   (all x \ all y \ all z \ ((leq x y) && ssorted (cons/t y z)) ==> ssorted (cons/t x (cons/t y z))),
%   (truth ==> pperm nil/t nil/t),
%   (all z \ all v \ all y \ all u \ all x \ ((delete u (cons/t x y) z) && pperm z v) ==> (pperm (cons/t x y) (cons/t u v))),
%   (all x \ all y \ truth ==> delete x (cons/t x y) y),
%   (all x \ all y \ all z \ all w \ delete x z w ==> delete x (cons/t y z) (cons/t y w)),
%   (all x \ truth ==> leq zo x), (all x \ all y \ leq x y ==> leq (s x) (s y))]
  
%   , simpleprolog SORTRULES (ssort (cons/t zo (cons/t zo nil/t)) X), print X
%   , simpleprolog SORTRULES (ssort (cons/t (s zo) nil/t) Y), print Y
%   , simpleprolog SORTRULES (delete zo (cons/t zo nil/t) Z), print Z
%   , simpleprolog SORTRULES (delete zo (cons/t (s zo) (cons/t zo nil/t)) Z1), print Z1
%   , simpleprolog SORTRULES (pperm nil/t E), print E
%   , simpleprolog SORTRULES (pperm (cons/t zo (cons/t (s zo)  nil/t)) Q), print Q.




% prolog sortrules 
%     "sort (S(O)::O::nil,X)";;
%     prolog sortrules 
%     "sort (S(O)::O::S(S(O))::nil,X)";;
    
% let sortrules =
% ["sort(X,Y) :- perm(X,Y),sorted(Y)";
% "sorted(nil)";
% "sorted(X::nil)";
% "sorted(X::Y::Z) :- X <= Y, sorted(Y::Z)";
% "perm(nil,nil)";
% "perm(X::Y,U::V) :- delete(U,X::Y,Z), perm(Z,V)";
% "delete(X,X::Y,Y)";
% "delete(X,Y::Z,Y::W) :- delete(X,Z,W)";
% "0 <= X";
% "S(X) <= S(Y) :- X <= Y"];;


